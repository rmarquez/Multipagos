<?xml version="1.0"?>
<cocoon version="2.1">

<!--+
    |  This is the Apache Cocoon configuration file. This is the place
    |  where you configure the components that Cocoon uses internally (stuff
    |  like the cache) or handles to the pipeline components
    |  (stuff like XML parsers or XSLT processors).
    +-->

<!-- =========================== Sitemap =============================== -->

  <!--+
      | New implementation of the sitemap. It is interpreted, so load times
      | are super-fast, and request processing is slightly faster than with
      | the compiled engine thanks to the HotSpot VM.
      |
      | Reloading of the sitemap:
      |   The check-reload attribute determines if the sitemap is to be
      |   reloaded on change.
      |   Set to "no", the sitemap is generated once at startup.
      |   Set to "yes", the sitemap is regenerated if it changes.
      |
      | For development environment, set the check-reload to yes.
      | For production environment, it is advisable to set check-reload to no.
      +-->
  <sitemap check-reload="yes" file="context://sitemap.xmap" logger="sitemap"/>

<!-- ========================= Sitemap Flowscript ========================== -->

  <!--+
      |  The <flow-interpreters> element is used to describe the flowscript
      |  engines usedd by the current instance.
      |
      |  The attributes recognized by the <flow-interpreters> element are:
      |
      |    default (string value):
      |
      |       the default interpreted language assumed for <map:script>
      |       elements which do not specify a "language" attribute. If not
      |       present, the first language that's described within the
      |       <flow-interpreters> element is assumed to be the default
      |       language.
      |
      |  Within <flow-interpreters> only <component-instance> elements are
      |  recognized. The attributes recognized by this element are "name"
      |  and "class". "name" specifies the name of a scripting language,
      |  and "class" defines the Java class that implements it. See
      |  org.apache.cocoon.components.flow.Interpreter for the Cocoon
      |  interface with an scripting language interpreter.
      |
      |  A <component-instance> element contains as subelements the
      |  following elements:
      |
      |    reload-scripts (boolean value, default false):
      |       whether to check if the scripts source files are modified.
      |       Checking for modification is an expensive operation, so leave
      |       it disabled in a production environment. If not present it is
      |       assumed to be "false". When "true" *all* script files are
      |       checked for modification on each function invocation done using
      |       <map:call function="...">, but not more frequent than the value
      |       of "check-time" (see below).
      |
      |    check-time (long value, default 1000):
      |       time in miliseconds between the checks for the last modification
      |       date of script files.
      |
      |    debugger (boolean value, default false):
      |       whether support for the JavaScript debugger should be enabled in
      |       the control flow.
      +-->
  <flow-interpreters default="javascript" logger="flow">
    <!-- FOM (Flow Object Model) -->
    <component-instance class="org.apache.cocoon.components.flow.javascript.fom.FOM_JavaScriptInterpreter" name="javascript">
      <load-on-startup>resource://org/apache/cocoon/components/flow/javascript/fom/fom_system.js</load-on-startup>
      <reload-scripts>${javascript.reload-scripts}</reload-scripts>
      <check-time>${javascript.check-time}</check-time>
      <!--  <debugger>enabled</debugger> -->  <!-- JavaScript Debugger support -->
    </component-instance>
  </flow-interpreters>

  <!--+
      | Configuration for the continuations manager.
      |
      | This section specifies the default time-to-live of continuations
      | in miliseconds using the "time-to-live" attribute of
      | the <continuations-manager> element.
      |
      | If your site is sharing continuations between sitemaps you
      | should refactor your application to keep a continuation bound to
      | a single sitemap. The log will contain warnings which indicate
      | where a continuation from a different sitemap is used.
      |
      | When you cannot do the refactoring in one blow you can turn on
      | compatibility with shared continuations by setting the
      | "continuation-sharing-bug-compatible" attribute to "true".
      |
      | The <expirations-check> element specifies different policies for
      | expiring continuations. Currently only the "periodic" type is
      | supported.
      |
      | If you need higher security you can bind your continuations
      | to session. This way only the session that initially created
      | the continuation can later resume it. Also if session gets
      | invalidated all continuations are invalidated as well.
      | Enable this feature for web applications by setting
      | 'session-bound-continuations' to true.
      +-->
  <continuations-manager continuation-sharing-bug-compatible="false" logger="flow.manager" session-bound-continuations="false" time-to-live="${continuations-manager.time-to-live}">
    <expirations-check type="periodic">
      <offset>${continuations-manager.expirations-check.offset}</offset>
      <period>${continuations-manager.expirations-check.period}</period>
    </expirations-check>
  </continuations-manager>

<!-- =================== Sitemap Input/Output Modules ====================== -->

  <!--+
      | InputModules are a replacement to reading values directly
      | e.g. from request parameters. By using this abstraction and
      | indirection, other components can be more generic and changes
      | to the application logic are easier.
      |
      | A number of components already use InputModules: the sitemap processor,
      | flow, some matchers, the linkrewriting transformer, database actions
      | and more.
      |
      | For example the sitemap processor allows to obtain a value
      | named "foo" from an the InputModule for request parameters by
      | writing {request-param:foo} wherever a sitemap variable is
      | allowed.
      |
      | Some InputModules need the help of other InputModules to
      | obtain values and only apply a function to the obtained value
      | or change the name of the attribute. These modules usually
      | carry "Meta" in their name. An example is the ChainMetaModule
      | which tries several other modules in turn until a non-null
      | value is obtained or all modules are tied.
      |
      | For details and optional configuration parameters refer to the
      | accompanying javadocs.
      +-->
  <input-modules>
    <component-instance class="org.apache.cocoon.components.modules.input.URLEncodeModule" logger="core.modules.input" name="url-encode">
      <encoding>UTF-8</encoding>
    </component-instance>
    <component-instance class="org.apache.cocoon.components.modules.input.URLDecodeModule" logger="core.modules.input" name="url-decode">
      <encoding>UTF-8</encoding>
    </component-instance>
    <component-instance class="org.apache.cocoon.components.modules.input.GlobalInputModule" logger="core.modules.input" name="global"/>
    <component-instance class="org.apache.cocoon.components.modules.input.RequestModule" logger="core.modules.input" name="request"/>
    <component-instance class="org.apache.cocoon.components.modules.input.BaseLinkModule" logger="core.modules.input" name="baselink"/>
    <component-instance class="org.apache.cocoon.components.modules.input.SessionModule" logger="core.modules.input" name="session"/>
    <component-instance class="org.apache.cocoon.components.modules.input.RequestParameterModule" logger="core.modules.input" name="request-param"/>
    <component-instance class="org.apache.cocoon.components.modules.input.RawRequestParameterModule" logger="core.modules.input" name="raw-request-param"/>
    <component-instance class="org.apache.cocoon.components.modules.input.RequestAttributeModule" logger="core.modules.input" name="request-attr"/>
    <component-instance class="org.apache.cocoon.components.modules.input.HeaderAttributeModule" logger="core.modules.input" name="request-header"/>
    <component-instance class="org.apache.cocoon.components.modules.input.SessionAttributeModule" logger="core.modules.input" name="session-attr"/>
    <component-instance class="org.apache.cocoon.components.modules.input.CookieModule" logger="core.modules.input" name="cookie"/>
    <component-instance class="org.apache.cocoon.components.modules.input.SystemPropertyModule" logger="core.modules.input" name="system-property"/>
    <component-instance class="org.apache.cocoon.components.modules.input.StringConstantModule" logger="core.modules.input" name="constant"/>
    <component-instance class="org.apache.cocoon.components.modules.input.RandomNumberModule" logger="core.modules.input" name="random"/>
    <component-instance class="org.apache.cocoon.components.modules.input.DigestMetaModule" logger="core.modules.input" name="digest"/>
    <component-instance class="org.apache.cocoon.components.modules.input.DateInputModule" logger="core.modules.input" name="date">
      <!-- <format>EEE, d MMM yyyy HH:mm:ss Z</format> -->
      <!--Eg: Mon, 28 Oct 2002 03:08:49 +1100 -->
    </component-instance>
    <component-instance class="org.apache.cocoon.components.modules.input.NullInputModule" logger="core.modules.input" name="nullinput"/>
    <component-instance class="org.apache.cocoon.components.modules.input.RealPathModule" logger="core.modules.input" name="realpath"/>
    <component-instance class="org.apache.cocoon.components.modules.input.ContextPathModule" logger="core.modules.input" name="contextpath"/>
    <component-instance class="org.apache.cocoon.components.modules.input.NamingInputModule" logger="core.modules.input" name="naming">
    </component-instance>
    <component-instance class="org.apache.cocoon.components.modules.input.PropertiesFileModule" logger="core.modules.input" name="cocoon-properties">
      <file src="resource://org/apache/cocoon/cocoon.properties"/>
    </component-instance>
    <component-instance class="org.apache.cocoon.components.modules.input.FlowAttributeModule" logger="core.modules.input" name="flow-attribute"/>
    <component-instance class="org.apache.cocoon.components.modules.input.FlowAttributeModule" logger="core.modules.input" name="flow-attr"/>
    <component-instance class="org.apache.cocoon.components.modules.input.FlowContinuationModule" logger="core.modules.input" name="flow-continuation"/>

    <component-instance class="org.apache.cocoon.components.modules.input.XMLMetaModule" logger="core.modules.input" name="xmlmeta"/>
    <component-instance class="org.apache.cocoon.components.modules.input.MapMetaModule" logger="core.modules.input" name="mapmeta"/>
    <component-instance class="org.apache.cocoon.components.modules.input.DateMetaInputModule" logger="core.modules.input" name="datemeta"/>
    <component-instance class="org.apache.cocoon.components.modules.input.JXPathMetaModule" logger="core.modules.input" name="jxpath"/>
    <component-instance class="org.apache.cocoon.components.modules.input.SimpleMappingMetaModule" logger="core.modules.input" name="simplemap"/>
    <component-instance class="org.apache.cocoon.components.modules.input.LocateResource" logger="core.modules.input" name="locate"/>
    <component-instance class="org.apache.cocoon.components.modules.input.ChainMetaModule" logger="core.modules.input" name="chain">
      <input-module name="request-param"/>
      <input-module name="request-attr"/>
      <input-module name="session-attr"/>
      <input-module name="defaults"/>
    </component-instance>

  <!--..... Start configuration from 'modules' -->


      <!-- This input module provides access to the information of a session context -->
      <component-instance class="org.apache.cocoon.webapps.session.components.ContextInputModule" logger="core.modules.input" name="session-context"/>

<!--..... End configuration from 'modules' -->
</input-modules>

  <!--+
      | OutputModules are companion modules for InputModules.
      |
      | The same principles apply here, only that OutputModules allow
      | writing data to places. Apparently, there are a lot less
      | places to write to than to read data from, thus there are only
      | a few OutputModules coming with Apache Cocoon.
      |
      | One special feature of OutputModules is, that they expose some
      | limited transactional behaviour. Hence it does not suffice to
      | write a value, but it is required to confirm this at the
      | end. Until then, the value could not be read from the
      | corresponding InputModule. This behaviour is not enfored but
      | it should be expected. Omitting a commit or rollback is an
      | error.
      |
      | OutputModules are currently used by flow, a number of actions
      | and transformers.
      +-->
  <output-modules>
    <component-instance class="org.apache.cocoon.components.modules.output.RequestAttributeOutputModule" logger="core.modules.output" name="request-attr"/>
    <component-instance class="org.apache.cocoon.components.modules.output.RequestAttributeMap" logger="core.modules.output" name="request-attr-map"/>
    <component-instance class="org.apache.cocoon.components.modules.output.SessionAttributeOutputModule" logger="core.modules.output" name="session-attr"/>
  </output-modules>

<!-- ================================= XML ================================ -->

  <!--+
      | Entity resolution catalogs
      |
      | The default catalog is distributed at WEB-INF/entities/catalog
      | This is the contextual pathname for Cocoon resources.
      | You can override this path, if necessary, using the "catalog" parameter:
      |
      |    <parameter name="catalog" value="WEB-INF/entities/catalog"/>
      |
      | However, it is probably desirable to leave this default catalog config
      | and declare your own local catalogs, which are loaded in addition to
      | the system catalog.
      |
      | There are various ways to do local configuration (see "Entity Catalogs"
      | documentation). One way is via the CatalogManager.properties file.
      | As an additional method, you can specify the "local-catalog"
      | parameter here.
      |
      | local-catalog:
      |   The full filesystem pathname to a single local catalog file.
      |
      |  <parameter name="local-catalog" value="/usr/local/sgml/mycatalog"/>
      |
      | verbosity:
      | The level of messages for status/debug (messages go to standard output)
      | The following messages are provided ...
      |  0 = none
      |  1 = ? (... not sure yet)
      |  2 = 1+, Loading catalog, Resolved public, Resolved system
      |  3 = 2+, Catalog does not exist, resolvePublic, resolveSystem
      |  10 = 3+, List all catalog entries when loading a catalog
      |    (Cocoon also logs the "Resolved public" messages.)
      |
      |     <parameter name="verbosity" value="2"/>
      +-->
  <entity-resolver logger="core.resolver">
    <parameter name="catalog" value="WEB-INF/entities/catalog"/>
    <parameter name="verbosity" value="1"/>
  </entity-resolver>

  <!--+
      | XML Parser
      |
      | Apache Cocoon requires a JAXP 1.1 parser. The default parser is
      | org.apache.excalibur.xml.impl.JaxpParser.
      | Note: If you have problems because your servlet environment uses its
      | own parser not conforming to JAXP 1.1 try using the alternative
      | XercesParser instead of the JaxpParser. To activate the XercesParser,
      | change the class attribute to
      |   class="org.apache.excalibur.xml.impl.XercesParser"
      | You will also need to add a system property to your JVM,
      | probably on the startup of your servlet engine like this:
      | -Dorg.apache.excalibur.xml.sax.SAXParser=org.apache.excalibur.xml.impl.XercesParser
      |
      | Configuration parameters for the JaxpParser (not the XercesParser!):
      | - validate (boolean, default = false): should the parser validate
      |     parsed documents?
      |     Note: XML validation is only being used for the documentation build.
      |     (If you are going to use it elsewhere, then do so with caution.)
      |     You really should have validated all of your XML documents already,
      |     according to their proper DTD or schema. Do not expect Cocoon
      |     to do it.
      | - namespace-prefixes (boolean, default = false) : do we want
      |     namespaces declarations also as 'xmlns:' attributes?
      |     Note : setting this to true confuses some XSL processors
      |     (e.g. Saxon).
      | - stop-on-warning (boolean, default = true) : should the parser
      |     stop parsing if a warning occurs ?
      | - stop-on-recoverable-error (boolean, default = true) : should the
      |     parser stop parsing if a recoverable error occurs ?
      | - reuse-parsers (boolean, default = true) : do we want to reuse
      |     parsers or create a new parser for each parse ?
      |     Note : even if this parameter is true, parsers are not recycled
      |     in case of parsing errors : some parsers (e.g. Xerces) do not like
      |     to be reused after failure.
      | - sax-parser-factory (string, optional) : the name of the
      |     SAXParserFactory implementation class to be used instead of using
      |     the standard JAXP mechanism (SAXParserFactory.newInstance()). This
      |     allows to choose unambiguously the JAXP implementation to be used
      |     when several of them are available in the classpath.
      | - document-builder-factory (string, optional) : the name of the
      |     DocumentBuilderFactory implementation to be used (similar to
      |     sax-parser-factory for DOM).
      | - drop-dtd-comments : should comment() events from DTD's be dropped?
      |     Note: Since this implementation does not support the DeclHandler
      |     interface anyway, it is quite useless to only have the comments
      |     from DTD. And the comment events from the internal DTD subset
      |     would appear in the serialized output again.
      +-->
  <xml-parser class="org.apache.excalibur.xml.impl.JaxpParser" logger="core.xml-parser" pool-max="${xml-parser.pool-max}">
    <parameter name="validate" value="false"/>
    <parameter name="namespace-prefixes" value="false"/>
    <parameter name="stop-on-warning" value="true"/>
    <parameter name="stop-on-recoverable-error" value="true"/>
    <parameter name="reuse-parsers" value="false"/>
    <parameter name="drop-dtd-comments" value="true"/>
  </xml-parser>

  <!--+
      | XSLT Processor
      |
      | 'incremental-processing' (only works with Xalan) allows the XSLT
      | processor to start the output of the transformation as soon as possible.
      | if set to false, the transforer waits until the end of the
      | transformation to deliver the output.
      | WARNING: * if you enable incremental-processing, you should be aware of
      |            the following bug:
      |            http://issues.apache.org/bugzilla/show_bug.cgi?id=13186
      |          * incremental-processing creates an additional, non-pooled thread.
      |          * using incremental-processing does not save memory, the input
      |            tree will still be build completely.
      |          * incremental processing is a 'static' thing in Xalan: if you
      |            enable it on one xslt-processor, enable it on all.
      +-->
  <xslt-processor logger="core.xslt">
     <parameter name="use-store" value="true"/>
     <parameter name="incremental-processing" value="false"/>
  </xslt-processor>

  <!--+
      | XSLT Processor using xsltc from Xalan
      | For Interpreted Xalan use:
      | <transformer-factory>org.apache.xalan.processor.TransformerFactoryImpl</transformer-factory>
      +-->
  <component class="org.apache.cocoon.components.xslt.TraxProcessor" logger="core.xslt" role="org.apache.excalibur.xml.xslt.XSLTProcessor/xsltc">
     <parameter name="use-store" value="true"/>
     <parameter name="transformer-factory" value="org.apache.xalan.xsltc.trax.TransformerFactoryImpl"/>
  </component>

  <!--+
      | Xalan XSLT Processor
      +-->
  <component class="org.apache.cocoon.components.xslt.TraxProcessor" logger="core.xslt" role="org.apache.excalibur.xml.xslt.XSLTProcessor/xalan">
     <parameter name="use-store" value="true"/>
     <parameter name="incremental-processing" value="false"/>
     <parameter name="transformer-factory" value="org.apache.xalan.processor.TransformerFactoryImpl"/>
  </component>

  <!--+
      | Saxon XSLT Processor
      | For old (6.5.2) Saxon use:
      |  <parameter name="transformer-factory" value="com.icl.saxon.TransformerFactoryImpl"/>
      | For new (7+) Saxon use:
      |  <parameter name="transformer-factory" value="net.sf.saxon.TransformerFactoryImpl"/>
  <component logger="core.xslt"
             role="org.apache.excalibur.xml.xslt.XSLTProcessor/saxon"
             class="org.apache.cocoon.components.xslt.TraxProcessor">
     <parameter name="use-store" value="true"/>
     <parameter name="transformer-factory" value="com.icl.saxon.TransformerFactoryImpl"/>
  </component>
      +-->

  <!--+
      | Xpath Processor (Based on Xalan)
      +-->
  <xpath-processor class="org.apache.excalibur.xml.xpath.XPathProcessorImpl" logger="core.xpath"/>

  <!--+
      | The XMLizers converts different mime-types to XML
      +-->
  <xmlizer logger="core.xmlizer">
    <parser mime-type="text/xml" role="org.apache.excalibur.xml.sax.SAXParser"/>
  </xmlizer>

<!-- ============================ Object Stores =========================== -->

  <!--+
      | Transient Store: holds objects that don't have to survive shutdown
      |
      | Common configuration parameters:
      | maxobjects: Indicates how many objects will be held in the cache.
      |    When the number of maxobjects has been reached. The last object
      |    in the cache will be thrown out.
      +-->
  <transient-store logger="core.store.transient">
    <parameter name="maxobjects" value="${transient-store.maxobjects}"/>
  </transient-store>

  <!--+
      | Store: generic store. The default implementation is an in-memory store
      | backed by a disk store (based on EHCache). This forms a two-stage
      | cache composed of a fast in-memory MRU front-end and a persistent
      | back-end which stores the less-used objects.
      |
      | Common configuration parameters:
      | maxobjects: Indicates how many objects will be held in the cache.
      |    When the number of maxobjects has been reached. The last object
      |    in the cache will be thrown out.
      +-->
  <store logger="core.store">
    <parameter name="maxobjects" value="${store.maxobjects}"/>
    <parameter name="use-cache-directory" value="true"/>
  </store>

  <!--+
      | Store Janitor: the store garbage collector and memory usage controller.
      |
      | WARNING: Be careful with the heapsize and freememory parameters.
      |           Wrong values can cause high cpu usage.
      |
      | Example configuration:
      | Jvm settings:
      |    -Xmx200000000
      | store-janitor settings:
      |    <parameter name="freememory" value="5000000"/>
      |    <parameter name="heapsize" value="196000000"/>
      |
      | It is recommended to have heapsize equal to -Xmx, especially on Sun's
      | JVM which are unable to shrink its heap once it grows above minimum.
      | Freememory should be greater than amount of memory necessary for normal
      | application operation.
      | BUT: The heap size of the memory of the JVM is a little bit less than
      |      the value you specify for -Xmx, so you have to set the heapsize
      |      for the store janitor to a value which is lower (2% less seems
      |      to be a working value).
      +-->
  <store-janitor logger="core.store.janitor">
    <!--+
        | How much free memory shall be available in the jvm?
        | If not specified, defaults to 1Mb.
        +-->
    <parameter name="freememory" value="${store-janitor.freememory}"/>
    <!--+
        | How much memory at max jvm can consume?
        | The default max heapsize for Sun's JVM is (almost) 64Mb,
        | can be increased by specifying -Xmx command line parameter.
        | If not specified, defaults to 66600000 bytes.
        +-->
    <parameter name="heapsize" value="${store-janitor.heapsize}"/>
    <!--+
        | How often shall the cleanup thread check memory?
        | If not specified, defaults to 10 seconds.
        +-->
    <parameter name="cleanupthreadinterval" value="${store-janitor.cleanup-thread-interval}"/>
    <!--+
        | Experimental adaptive algorithm for cleanup interval
    <parameter name="adaptivethreadinterval" value="true"/>
        +-->
    <!--+
        | What percent of the store elements shall be dropped on low memory?
        | If not specified, defaults to 10%
        +-->
    <parameter name="percent_to_free" value="${store-janitor.percent-to-free}"/>
    <!--+
        | Shall garbage collector be invoked on low memory?
        | If not specified, defaults to false.
        +-->
    <parameter name="invokegc" value="false"/>
    <!--+
        | Algorithm describing how to clean caches in low memory situations.
        |   round-robin: The registered caches are cycled through,
        |                and each time there is a low memory situation one
        |                of the registered caches has objects freed from it.
        |   all-stores:  All registered stores have objects removed from
        |                them each time there is a low memory situation.
        | If not specified, defaults to 'round-robin'.
        +-->
    <parameter name="freeingalgorithm" value="round-robin"/>
    <!--+
        | Name of the thread pool to use.
        | If not specified, defaults to 'daemon'.
        +-->
    <parameter name="thread-pool" value="daemon"/>

    <!--+
        | What should be the priority of the cleanup thread?
        | This parameter is used only by older implementation of the janitor.
        | New implementation uses centrally configured thread pool (see
        | thread-pools element below).
    <parameter name="threadpriority" value="5"/>
        +-->
  </store-janitor>

<!-- ========================= Protocol Handlers =========================== -->

  <!--+
      | Source Factories
      |
      | Each source factory adds a special uri schemes to the system.
      +-->
  <source-factories>
    <component-instance class="org.apache.excalibur.source.impl.ResourceSourceFactory" name="resource"/>
    <component-instance class="org.apache.cocoon.components.source.impl.ContextSourceFactory" name="context"/>
    <component-instance class="org.apache.cocoon.components.source.impl.SitemapSourceFactory" name="cocoon"/>

    <!--+
        | The "file:" source protocol is modifiable (can be written to) and
        | traversable (directory structures can be crawled).
        +-->
    <component-instance class="org.apache.excalibur.source.impl.FileSourceFactory" name="file"/>
    <component-instance class="org.apache.cocoon.components.source.impl.PartSourceFactory" name="upload"/>
    <component-instance class="org.apache.cocoon.components.source.impl.ModuleSourceFactory" name="module"/>
    <component-instance class="org.apache.cocoon.components.source.impl.XModuleSourceFactory" name="xmodule"/>
    <component-instance class="org.apache.cocoon.components.source.impl.ZipSourceFactory" name="zip"/>
    <component-instance class="org.apache.cocoon.components.source.impl.EmptySourceFactory" name="empty"/>

    <!--+
        | The "*" protocol handles all uri schemes that are not explicitely
        | specified. This includes all JDK standard protocols.
        +-->
    <component-instance class="org.apache.excalibur.source.impl.URLSourceFactory" name="*"/>
</source-factories>

<!-- ================ Internationalization Catalogs =================== -->

  <!--+
      | I18n Bundle Factory
      |
      | BundleFactory loads Bundles with i18n resources for the given locale.
      | Default location for bundles specified with the 'catalogue-location'.
      +-->
  <i18n-bundles logger="core.i18n">
    <!--+
        | Role of the store component to be used for caching loaded bundles.
        +-->
    <store-role>org.apache.excalibur.store.Store/TransientStore</store-role>
    <!--+
        | Reload check delay. Default 60000 (1 minute), 0 means no delay
        | (check always), -1 means no reload.
        +-->
    <reload-interval>${i18n-bundles.reload-interval}</reload-interval>
    <!--+
        | Location of the default message catalogue. Optional.
        +-->
    <catalogue-location>context://samples/i18n/translations</catalogue-location>
  </i18n-bundles>

<!-- ====================== System Components =========================== -->

  <!--+
      | The core classloader implementation
      +-->
  <classloader class="org.apache.cocoon.components.classloader.ClassLoaderManagerImpl" logger="core.classloader"/>

  <!--+
      | XML compiler/decompiler
      |
      | These components are used to process SAX events and produce a binary
      | representation that is much more compact and efficient for
      | subsequent parsing. These are used by the cache system to save
      | the intermediate results of the pipeline stages reducing the overhead
      | of xml parsing/serialization.
      +-->
  <xml-serializer class="org.apache.cocoon.components.sax.XMLByteStreamCompiler" logger="core.xml.serializer" pool-max="${xml-serializer.pool-max}"/>
  <xml-deserializer class="org.apache.cocoon.components.sax.XMLByteStreamInterpreter" logger="core.xml.deserializer" pool-max="${xml-deserializer.pool-max}"/>

  <!--+
      | The Cache Manager is a component that can be used to cache content.
      | It is currently used by the cinclude transformer
      +-->
  <component class="org.apache.cocoon.transformation.helpers.DefaultIncludeCacheManager" role="org.apache.cocoon.transformation.helpers.IncludeCacheManager">
    <!-- Set the preemptive-loader-url to a pipeline inside Cocoon that
         contains the preemptive loader action. The URL must be absolute!
    <parameter name="preemptive-loader-url"
               value="http://localhost:8080/cocoon/samples/cinclude/loader"/>
    -->
  </component>
  <!--+
          | AGREGANDO COMPONENTE CRON.
          +-->
  <component role="org.apache.cocoon.components.cron.JobScheduler"
               class="org.apache.cocoon.components.cron.CocoonQuartzJobScheduler"
               logger="cron">
       <!--+
           | Definitions for a thread pool used to schedule jobs
           +-->
       <thread-pool>
        <use-queueing>false</use-queueing>
        <queue-size>-1</queue-size>
        <max-pool-size>-1</max-pool-size>
        <min-pool-size>1</min-pool-size>
        <keep-alive-time-ms>60000</keep-alive-time-ms>
        <block-policy>RUN</block-policy>
        <shutdown-graceful>true</shutdown-graceful>
        <shutdown-wait-time-ms>5000</shutdown-wait-time-ms>
      </thread-pool>
           <!--+
            | Definition of the JobStore.
            | Store type can be one of "ram" (default), "tx", or "cmt".
            |
            | "tx" and "cmt" stores require datasource configuration.
            | (Attributes delegate and provider are optional)
            <store type="tx" delegate="org.quartz.impl.jdbcjobstore.StdJDBCDelegate">
              <datasource provider="jndi">jdbc/MyJobStoreDS</datasource>
            </store>
             +-->
      <store type="ram"/>
      <!-- Definintions of triggers -->
      <triggers>
        <!--+
            | A trigger element has the following attributes:
            |    name:            A name for the trigger. Mandatory
            |    target:          A role name to lookup the job object in the ServiceManager. Mandatory
            |    concurrent-runs: Is it allowed to reschedule a job even if the previous one is
            |                     still running. Optionl, defaults to true.
            | A trigger element has the following child elements:
            |    cron: A string expression defining the scheduling timing.
            |          Optional. If not specified the following elements are explored:
            |       seconds:  Expression for the secods part of a cron expression.
            |       minutes:  Expression for the minutes part of a cron expression.
            |       hours:    Expression for the hours part of a cron expression.
            |       days:     Expression for the days part of a cron expression.
            |       month:    Expression for the months part of a cron expression.
            |       weekdays: Expression for the weekdays part of a cron expression.
            |       years:    Expression for the years part of a cron expression.
            | For detailed information about the expressions look at the
            | documentation.
            +-->

  <!--+
                    | Sample trigger definitions, use components defined below.
                    +-->
                <trigger name="scheduled-email-ofertas"
                         target="org.apache.cocoon.components.cron.CronJob/emailofertas"
                         concurrent-runs="true">
                  <seconds>00</seconds>
                  <minutes>30</minutes>
                  <hours>11</hours>
                  <days>*</days>
                  <months>*</months>
                  <weekdays>?</weekdays>
                </trigger>
                <!--<trigger name="scheduled-email-compras"
                         target="org.apache.cocoon.components.cron.CronJob/emailcompras"
                         concurrent-runs="true">
                  <seconds>00</seconds>
                  <minutes>00</minutes>
                  <hours>09</hours>
                  <days>*</days>
                  <months>*</months>
                  <weekdays>?</weekdays>
                </trigger>-->
      </triggers>
  </component>

  <!--+
      | Sample definition of the TestCronJob cron job, used by
      | trigger configuration above, as well as by sample page.
      +

	 <component role="org.apache.cocoon.components.cron.CronJob/emailofertas"
	             class="com.metropolitana.multipagos.cron.CronEmailOfertasCurso"
	             logger="cron.emailofertas">
	             <pipeline>informes/notificarofertaSendmail.list</pipeline>
	  </component>
	  -->
<!--+
	 |<component role="org.apache.cocoon.components.cron.CronJob/emailcompras"
	 |            class="net.agssa.sga.cron.CronEmailComprasAlCredito"
	 |            logger="cron.emailcompras">
	 |            <pipeline>informes/comprasalcreditoSendmail.list</pipeline>
	 | </component>
	 +-->
  <!--+
      | Runnable manager
      |
      | This component manages commands (Runnables) executed in background using
      | preconfigured pools of worker threads
      +-->
  <runnable-manager logger="core.runnable">
    <!--+
        | This is the default configuration of the runnable-manager. More
        | indepth information can be found at
        | http://gee.cs.oswego.edu/dl/classes/EDU/oswego/cs/dl/util/concurrent/PooledExecutor.html
        | The following elements can be used:
        |
        | thread-factory:        specifies the fully qualified class name of an
        |                        org.apache.cocoon.components.thread.ThreadFactory
        |                        implementation. It is responsible to create Thread
        |                        classes.
        | thread-pools:          container element for thread-pool elements.
        | name:                  required name of the pool.
        | priority:              optional priority all threads of the pool will
        |                        have (the ThreadFactory will be set to this
        |                        priority).The possible values  are:
        |                          MIN:  corresponds to Thread#MIN_PRIORITY
        |                          NORM: corresponds to Thread#NORM_PRIORITY (default)
        |                          MAX:  corresponds to Thread#MAX_PRIORITY
        | daemon:                whether newly created Threads should run in
        |                        daemon mode or not. Default to false.
        | queue-size:            optional size of a queue to hold Runnables if the
        |                        pool is full. Possible values are:
        |                          less than 0:    unbounded (default)
        |                          equal to 0:     no queue at all
        |                          greater than 0: size of the queue
        | max-pool-size:         optional maximum number of threads in the pool.
        |                        Defaults to 5.
        |                        NOTE: if a queue is specified (queue-sie != 0)
        |                              this value will be ignored.
        | min-pool-size:         optional minimum number of threads in the pool.
        |                        Defaults to 5.
        |                        NOTE: if a queue has been specified (queue-sie != 0)
        |                              this value will be used as the maximum of
        |                              thread running concurrently.
        | keep-alive-time-ms:    The time in ms an idle thread should keep alive
        |                        before it might get garbage collected. This
        |                        defaults to 60000 ms.
        | block-policy;          The policy to be used if all resources (thread in
        |                        the pool and slots in the queue) are exhausted.
        |                        Possible values are:
        |                          ABORT:         Throw a RuntimeException
        |                          DISCARD:       Throw away the current request
        |                                         and return.
        |                          DISCARDOLDEST: Throw away the oldest request
        |                                         and return.
        |                          RUN (default): The thread making the execute
        |                                         request runs the task itself.
        |                                         This policy helps guard against
        |                                         lockup.
        |                          WAIT:          Wait until a thread becomes
        |                                         available. This policy should, in
        |                                         general, not be used if the
        |                                         minimum number of threads is zero,
        |                                         in which case a thread may never
        |                                         become available.
        | shutdown-graceful:     Terminate thread pool after processing all
        |                        Runnables currently in queue. Any Runnable entered
        |                        after this point will be discarded. A shut down
        |                        pool cannot be restarted. This also means that a
        |                        pool will need keep-alive-time-ms to terminate.
        |                        The default value not to shutdown graceful.
        | shutdown-wait-time-ms: The time in ms to wait before issuing an
        |                        immediate shutdown after a graceful shutdown
        |                        has been requested.
        +-->
    <thread-factory>org.apache.cocoon.components.thread.DefaultThreadFactory</thread-factory>
    <thread-pools>
      <!--+
          | This is the default thread pool. It's use fits best for short
          | running background tasks.
          +-->
      <thread-pool>
        <name>default</name>
        <priority>NORM</priority>
        <daemon>false</daemon>
        <queue-size>-1</queue-size>
        <max-pool-size>5</max-pool-size>
        <min-pool-size>5</min-pool-size>
        <keep-alive-time-ms>60000</keep-alive-time-ms>
        <block-policy>ABORT</block-policy>
        <shutdown-graceful>false</shutdown-graceful>
        <shutdown-wait-time-ms>-1</shutdown-wait-time-ms>
      </thread-pool>
      <!--+
          | This thread pool should be used for daemons (permanently running
          | threads).
          +-->
      <thread-pool>
        <name>daemon</name>
        <priority>NORM</priority>
        <daemon>true</daemon>
        <queue-size>0</queue-size>
        <max-pool-size>-1</max-pool-size>
        <min-pool-size>1</min-pool-size>
        <keep-alive-time-ms>60000</keep-alive-time-ms>
        <block-policy>ABORT</block-policy>
        <shutdown-graceful>false</shutdown-graceful>
        <shutdown-wait-time-ms>-1</shutdown-wait-time-ms>
      </thread-pool>
    </thread-pools>
  </runnable-manager>
<!--..... Start configuration from 'cocoon-template-expression' -->

  <expression-factory/>
  <expression-compilers>
    <component-instance class="org.apache.cocoon.components.expression.jxpath.JXPathCompiler" name="default"/>
    <component-instance class="org.apache.cocoon.components.expression.jexl.JexlCompiler" name="jexl"/>
    <component-instance class="org.apache.cocoon.components.expression.jxpath.JXPathCompiler" name="jxpath"/>
    <component-instance class="org.apache.cocoon.components.expression.javascript.JavaScriptCompiler" name="js"/>
  </expression-compilers>
  <string-template-parsers>
    <component-instance class="org.apache.cocoon.template.expression.JXTGStringTemplateParser" name="jxtg"/>
    <component-instance class="org.apache.cocoon.template.expression.DefaultStringTemplateParser" name="default"/>
  </string-template-parsers>
<!--..... End configuration from 'cocoon-template-expression' -->
<!--..... Start configuration from 'cocoon-template' -->

    <component class="org.apache.cocoon.template.script.DefaultScriptManager" role="org.apache.cocoon.template.script.ScriptManager"/>
    <component class="org.apache.cocoon.template.script.DefaultInstructionFactory" role="org.apache.cocoon.template.script.InstructionFactory"/>
    <component class="org.apache.cocoon.template.expression.JXTGStringTemplateParser" role="org.apache.cocoon.template.expression.StringTemplateParser"/>
<!--..... End configuration from 'cocoon-template' -->
<!--..... Start configuration from 'forms-binding' -->


  <!--+
      | Cocoon Forms bindings
      +-->
  <forms-binding logger="forms.bindings">
    <bindings>
      <binding name="value" src="org.apache.cocoon.forms.binding.ValueJXPathBindingBuilder"/>
      <binding name="multi-value" src="org.apache.cocoon.forms.binding.MultiValueJXPathBindingBuilder"/>
      <binding name="context" src="org.apache.cocoon.forms.binding.ContextJXPathBindingBuilder"/>
      <binding name="repeater" src="org.apache.cocoon.forms.binding.RepeaterJXPathBindingBuilder"/>
      <binding name="simple-repeater" src="org.apache.cocoon.forms.binding.SimpleRepeaterJXPathBindingBuilder"/>
      <binding name="temp-repeater" src="org.apache.cocoon.forms.binding.TempRepeaterJXPathBindingBuilder"/>
      <binding name="aggregate" src="org.apache.cocoon.forms.binding.AggregateJXPathBindingBuilder"/>
      <binding name="set-attribute" src="org.apache.cocoon.forms.binding.SetAttributeJXPathBindingBuilder"/>
      <binding name="insert-node" src="org.apache.cocoon.forms.binding.InsertNodeJXPathBindingBuilder"/>
      <binding name="delete-node" src="org.apache.cocoon.forms.binding.DeleteNodeJXPathBindingBuilder"/>
      <binding name="insert-bean" src="org.apache.cocoon.forms.binding.InsertBeanJXPathBindingBuilder"/>
      <binding name="javascript" src="org.apache.cocoon.forms.binding.JavaScriptJXPathBindingBuilder"/>
      <binding name="custom" src="org.apache.cocoon.forms.binding.CustomJXPathBindingBuilder"/>
      <binding name="case" src="org.apache.cocoon.forms.binding.CaseJXPathBindingBuilder"/>
      <binding name="class" src="org.apache.cocoon.forms.binding.ClassJXPathBindingBuilder"/>
      <binding name="new" src="org.apache.cocoon.forms.binding.NewJXPathBindingBuilder"/>
      <binding name="struct" src="org.apache.cocoon.forms.binding.StructJXPathBindingBuilder"/>
      <binding name="union" src="org.apache.cocoon.forms.binding.UnionJXPathBindingBuilder"/>
      <binding name="group" src="org.apache.cocoon.forms.binding.GroupJXPathBindingBuilder"/>
      <binding name="expand" src="org.apache.cocoon.forms.binding.ExpandJXPathBindingBuilder"/>
      <binding name="import" src="org.apache.cocoon.forms.binding.ImportJXPathBindingBuilder"/>
    </bindings>
  </forms-binding>

<!--..... End configuration from 'forms-binding' -->
<!--..... Start configuration from 'forms-calculated-algorithms' -->


  <!--+
      | Cocoon Forms calculated fields algorithms
      +-->
  <forms-calculated-algorithms default="formula" logger="forms.algorithms">
    <algorithm class="org.apache.cocoon.forms.formmodel.algorithms.SimpleFormulaBuilder" name="formula"/>
    <algorithm class="org.apache.cocoon.forms.formmodel.algorithms.JavaScriptBuilder" name="javascript"/>
    <algorithm class="org.apache.cocoon.forms.formmodel.algorithms.JavaAlgorithmBuilder" name="java"/>
    <algorithm class="org.apache.cocoon.forms.formmodel.algorithms.RepeatedFormulaBuilder" name="repeatedformula"/>
  </forms-calculated-algorithms>

<!--..... End configuration from 'forms-calculated-algorithms' -->
<!--..... Start configuration from 'forms-datatype' -->


  <!--+
      | Cocoon Forms datatypes and validation rules
      +-->
  <forms-datatype logger="forms.types">
    <datatypes>
      <datatype name="string" src="org.apache.cocoon.forms.datatype.typeimpl.StringTypeBuilder">
        <convertors default="dummy" plain="dummy">
          <convertor name="dummy" src="org.apache.cocoon.forms.datatype.convertor.DummyStringConvertorBuilder"/>
          <convertor name="htmlcleaner" src="org.apache.cocoon.forms.datatype.convertor.HtmlCleaningConvertorBuilder"/>
        </convertors>
      </datatype>
      <datatype name="integer" src="org.apache.cocoon.forms.datatype.typeimpl.IntegerTypeBuilder">
        <convertors default="formatting" plain="plain">
          <convertor name="plain" src="org.apache.cocoon.forms.datatype.convertor.PlainIntegerConvertorBuilder"/>
          <convertor name="formatting" src="org.apache.cocoon.forms.datatype.convertor.FormattingIntegerConvertorBuilder"/>
        </convertors>
      </datatype>
      <datatype name="long" src="org.apache.cocoon.forms.datatype.typeimpl.LongTypeBuilder">
        <convertors default="formatting" plain="plain">
          <convertor name="plain" src="org.apache.cocoon.forms.datatype.convertor.PlainLongConvertorBuilder"/>
          <convertor name="formatting" src="org.apache.cocoon.forms.datatype.convertor.FormattingLongConvertorBuilder"/>
        </convertors>
      </datatype>
      <datatype name="decimal" src="org.apache.cocoon.forms.datatype.typeimpl.DecimalTypeBuilder">
        <convertors default="formatting" plain="plain">
          <convertor name="plain" src="org.apache.cocoon.forms.datatype.convertor.PlainDecimalConvertorBuilder"/>
          <convertor name="formatting" src="org.apache.cocoon.forms.datatype.convertor.FormattingDecimalConvertorBuilder"/>
        </convertors>
      </datatype>
      <datatype name="float" src="org.apache.cocoon.forms.datatype.typeimpl.FloatTypeBuilder">
        <convertors default="formatting" plain="plain">
          <convertor name="plain" src="org.apache.cocoon.forms.datatype.convertor.PlainFloatConvertorBuilder"/>
          <convertor name="formatting" src="org.apache.cocoon.forms.datatype.convertor.FormattingFloatConvertorBuilder"/>
        </convertors>
      </datatype>
      <datatype name="double" src="org.apache.cocoon.forms.datatype.typeimpl.DoubleTypeBuilder">
        <convertors default="formatting" plain="plain">
          <convertor name="plain" src="org.apache.cocoon.forms.datatype.convertor.PlainDoubleConvertorBuilder"/>
          <convertor name="formatting" src="org.apache.cocoon.forms.datatype.convertor.FormattingDoubleConvertorBuilder"/>
        </convertors>
      </datatype>
      <datatype name="date" src="org.apache.cocoon.forms.datatype.typeimpl.DateTypeBuilder">
        <convertors default="formatting" plain="millis">
          <convertor name="formatting" src="org.apache.cocoon.forms.datatype.convertor.FormattingDateConvertorBuilder"/>
          <convertor name="millis" src="org.apache.cocoon.forms.datatype.convertor.MillisDateConvertorBuilder"/>
          <convertor name="icu4j" src="org.apache.cocoon.forms.datatype.convertor.Icu4jDateConvertorBuilder"/>
        </convertors>
      </datatype>
      <datatype name="boolean" src="org.apache.cocoon.forms.datatype.typeimpl.BooleanTypeBuilder">
        <convertors default="plain" plain="plain">
          <convertor name="plain" src="org.apache.cocoon.forms.datatype.convertor.PlainBooleanConvertorBuilder"/>
        </convertors>
      </datatype>
      <datatype name="enum" src="org.apache.cocoon.forms.datatype.typeimpl.EnumTypeBuilder">
        <convertors default="enum" plain="enum">
          <convertor name="enum" src="org.apache.cocoon.forms.datatype.convertor.EnumConvertorBuilder"/>
        </convertors>
      </datatype>
      <datatype name="bean" src="org.apache.cocoon.forms.datatype.typeimpl.BeanTypeBuilder">
        <convertors default="bean" plain="bean">
          <convertor name="bean" src="org.apache.cocoon.forms.datatype.convertor.BeanConvertorBuilder"/>
        </convertors>
      </datatype>
      <datatype name="char" src="org.apache.cocoon.forms.datatype.typeimpl.CharTypeBuilder">
        <convertors default="plain" plain="plain">
          <convertor name="plain" src="org.apache.cocoon.forms.datatype.convertor.CharConvertorBuilder"/>
        </convertors>
      </datatype>
    </datatypes>

    <validation-rules>
      <!-- old-style datatype validators (deprecated) -->
      <validation-rule name="length" src="org.apache.cocoon.forms.datatype.validationruleimpl.LengthValidationRuleBuilder"/>
      <validation-rule name="email" src="org.apache.cocoon.forms.datatype.validationruleimpl.EmailValidationRuleBuilder"/>
      <validation-rule name="value-count" src="org.apache.cocoon.forms.datatype.validationruleimpl.ValueCountValidationRuleBuilder"/>
      <validation-rule name="range" src="org.apache.cocoon.forms.datatype.validationruleimpl.RangeValidationRuleBuilder"/>
      <validation-rule name="assert" src="org.apache.cocoon.forms.datatype.validationruleimpl.AssertValidationRuleBuilder"/>
      <validation-rule name="mod10" src="org.apache.cocoon.forms.datatype.validationruleimpl.Mod10ValidationRuleBuilder"/>
      <validation-rule name="regexp" src="org.apache.cocoon.forms.datatype.validationruleimpl.RegExpValidationRuleBuilder"/>
    </validation-rules>
  </forms-datatype>

<!--..... End configuration from 'forms-datatype' -->
<!--..... Start configuration from 'forms-expression' -->


  <!--+
      | Cocoon Forms expression language and additional functions
      +-->
  <forms-expression logger="forms.expression">
    <function class="org.apache.cocoon.forms.expression.NullFunction" name="Null"/>
    <function class="org.apache.cocoon.forms.expression.IsNullFunction" name="IsNull"/>
    <function class="org.apache.cocoon.forms.expression.StringFunction" name="String"/>
    <function class="org.apache.cocoon.forms.expression.SumFunction" name="Sum"/>
  </forms-expression>

<!--..... End configuration from 'forms-expression' -->
<!--..... Start configuration from 'forms-form' -->


  <!--+
      | Cocoon Forms FormManager component and form model definition
      +-->
  <forms-formmanager logger="forms.model">
    <widgets>
      <widget name="form" src="org.apache.cocoon.forms.formmodel.FormDefinitionBuilder"/>
      <widget name="import" src="org.apache.cocoon.forms.formmodel.ImportDefinitionBuilder"/>
      <widget name="expand" src="org.apache.cocoon.forms.formmodel.ExpandDefinitionBuilder"/>
      <widget name="field" src="org.apache.cocoon.forms.formmodel.FieldDefinitionBuilder"/>
      <widget name="repeater" src="org.apache.cocoon.forms.formmodel.RepeaterDefinitionBuilder"/>
      <widget name="booleanfield" src="org.apache.cocoon.forms.formmodel.BooleanFieldDefinitionBuilder"/>
      <widget name="multivaluefield" src="org.apache.cocoon.forms.formmodel.MultiValueFieldDefinitionBuilder"/>
      <widget name="action" src="org.apache.cocoon.forms.formmodel.ActionDefinitionBuilder"/>
      <widget name="repeater-action" src="org.apache.cocoon.forms.formmodel.RepeaterActionDefinitionBuilder"/>
      <widget name="row-action" src="org.apache.cocoon.forms.formmodel.RowActionDefinitionBuilder"/>
      <widget name="submit" src="org.apache.cocoon.forms.formmodel.SubmitDefinitionBuilder"/>
      <widget name="button" src="org.apache.cocoon.forms.formmodel.ButtonDefinitionBuilder"/>
      <widget name="aggregatefield" src="org.apache.cocoon.forms.formmodel.AggregateFieldDefinitionBuilder"/>
      <widget name="output" src="org.apache.cocoon.forms.formmodel.OutputDefinitionBuilder"/>
      <widget name="upload" src="org.apache.cocoon.forms.formmodel.UploadDefinitionBuilder"/>
      <widget name="messages" src="org.apache.cocoon.forms.formmodel.MessagesDefinitionBuilder"/>
      <widget name="class" src="org.apache.cocoon.forms.formmodel.ClassDefinitionBuilder"/>
      <widget name="new" src="org.apache.cocoon.forms.formmodel.NewDefinitionBuilder"/>
      <widget name="struct" src="org.apache.cocoon.forms.formmodel.StructDefinitionBuilder"/>
      <widget name="union" src="org.apache.cocoon.forms.formmodel.UnionDefinitionBuilder"/>
      <widget name="group" src="org.apache.cocoon.forms.formmodel.GroupDefinitionBuilder"/>
      <widget name="captcha" src="org.apache.cocoon.forms.formmodel.CaptchaDefinitionBuilder"/>
      <widget name="tree" src="org.apache.cocoon.forms.formmodel.tree.builder.TreeDefinitionBuilder"/>
      <widget name="imagemap" src="org.apache.cocoon.forms.formmodel.ImageMapDefinitionBuilder"/>
      <widget name="calculatedfield" src="org.apache.cocoon.forms.formmodel.CalculatedFieldDefinitionBuilder"/>
      <widget name="filterfield" src="org.apache.cocoon.forms.formmodel.RepeaterFilterFieldDefinitionBuilder"/>
    </widgets>
  </forms-formmanager>

  <forms-treemodels>
    <treemodel class="org.apache.cocoon.forms.formmodel.tree.builder.JavaTreeModelDefinitionBuilder" name="java"/>
    <treemodel class="org.apache.cocoon.forms.formmodel.tree.builder.SourceTreeModelDefinitionBuilder" name="source"/>
  </forms-treemodels>

<!--..... End configuration from 'forms-form' -->
<!--..... Start configuration from 'forms-selection-lists' -->


  <!--+
      | Cocoon Forms selection lists
      +-->
  <forms-selection-lists default="default" logger="forms.lists">
    <selection-list class="org.apache.cocoon.forms.datatype.DefaultSelectionListBuilder" name="default"/>
    <selection-list class="org.apache.cocoon.forms.datatype.FlowJXPathSelectionListBuilder" name="flow-jxpath"/>
    <selection-list class="org.apache.cocoon.forms.datatype.EnumSelectionListBuilder" name="enum"/>
    <selection-list class="org.apache.cocoon.forms.datatype.JavaSelectionListBuilder" name="java"/>
    <selection-list class="org.apache.cocoon.forms.datatype.JavaScriptSelectionListBuilder" name="javascript"/>
  </forms-selection-lists>

<!--..... End configuration from 'forms-selection-lists' -->
<!--..... Start configuration from 'forms-validators' -->


  <!--+
      | Cocoon Forms validators
      +-->
  <forms-validators logger="forms.validators">
    <!-- new-style validators -->
    <validator class="org.apache.cocoon.forms.validation.impl.JavaScriptValidatorBuilder" name="javascript"/>
    <validator class="org.apache.cocoon.forms.validation.impl.LengthValidatorBuilder" name="length"/>
    <validator class="org.apache.cocoon.forms.validation.impl.EmailValidatorBuilder" name="email"/>
    <validator class="org.apache.cocoon.forms.validation.impl.ValueCountValidatorBuilder" name="value-count"/>
    <validator class="org.apache.cocoon.forms.validation.impl.RangeValidatorBuilder" name="range"/>
    <validator class="org.apache.cocoon.forms.validation.impl.AssertValidatorBuilder" name="assert"/>
    <validator class="org.apache.cocoon.forms.validation.impl.Mod10ValidatorBuilder" name="mod10"/>
    <validator class="org.apache.cocoon.forms.validation.impl.RegExpValidatorBuilder" name="regexp"/>
    <validator class="org.apache.cocoon.forms.validation.impl.CaptchaValidatorBuilder" name="captcha"/>
    <validator class="org.apache.cocoon.forms.validation.impl.JavaClassValidatorBuilder" name="java"/>
  </forms-validators>

<!--..... End configuration from 'forms-validators' -->
<!--..... Start configuration from 'forms-widgetlisteners' -->


  <!--+
      | Cocoon Forms form widget listeners
      +-->
  <forms-widgetlisteners logger="forms.listeners">
    <listener class="org.apache.cocoon.forms.event.impl.JavaClassWidgetListenerBuilder" name="java"/>
    <listener class="org.apache.cocoon.forms.event.impl.JavaScriptWidgetListenerBuilder" name="javascript"/>
  </forms-widgetlisteners>

<!--..... End configuration from 'forms-widgetlisteners' -->
<!--..... Start configuration from 'session' -->


  <session-manager logger="core.session-manager"/>
  <session-form-manager logger="core.session-manager"/>
  <session-transaction-manager logger="core.session-manager"/>
  <session-context-manager logger="core.session-manager"/>

  <session-media-manager logger="core.media-manager" pool-max="32">
      <mediatypes default="html">
        <media name="wap" useragent="Nokia"/>
        <media name="wap" useragent="UP"/>
        <media name="wap" useragent="Wapalizer"/>
      </mediatypes>
  </session-media-manager>

  <session-context-providers>
      <component-instance class="org.apache.cocoon.webapps.session.context.StandardSessionContextProvider" name="request"/>
      <component-instance class="org.apache.cocoon.webapps.session.context.StandardSessionContextProvider" name="temporary"/>
  <!--..... Start configuration from 'provider' -->

    <component-instance class="org.apache.cocoon.webapps.authentication.context.AuthenticationContextProvider" name="authentication"/>
<!--..... End configuration from 'provider' -->
</session-context-providers>
<!--..... End configuration from 'session' -->
<!--..... Start configuration from 'authentication' -->


    <!--+
        + The authentication manager
        +-->
    <authentication-manager logger="core.authentication-manager">
    </authentication-manager>

<!--..... End configuration from 'authentication' -->
</cocoon>